name: Build & Push progress to ECR

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  packages: read

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-west-1' }}
  ECR_REPO: progress-service
  ECS_CLUSTER: liwanag-cluster
  ECS_SERVICE: progress-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: gha-ecr-progress

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repo exists (idempotent)
        run: |
          aws ecr describe-repositories --repository-names "${{ env.ECR_REPO }}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${{ env.ECR_REPO }}" --image-scanning-configuration scanOnPush=true

      - name: Set up JDK 21 (cache Maven)
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          cache-dependency-path: pom.xml

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute tags
        id: tags
        run: |
          echo "REGISTRY=${{ steps.ecr.outputs.registry }}" >> $GITHUB_OUTPUT
          echo "IMAGE=${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}" >> $GITHUB_OUTPUT
          echo "SHA=${GITHUB_SHA::12}" >> $GITHUB_OUTPUT

      - name: Unit tests
        run: mvn -B -q -DskipITs test

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.tags.outputs.IMAGE }}:${{ steps.tags.outputs.SHA }}
            ${{ steps.tags.outputs.IMAGE }}:main
            ${{ steps.tags.outputs.IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max